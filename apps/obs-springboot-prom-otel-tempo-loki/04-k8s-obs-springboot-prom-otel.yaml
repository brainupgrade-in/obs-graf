apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: obs-springboot
  name: obs-springboot
spec:
  replicas: 3
  selector:
    matchLabels:
      app: obs-springboot
  template:
    metadata:
      labels:
        app: obs-springboot
    spec:
      containers:
      - image: ghcr.io/blueswen/spring-boot-observability/app:latest
        name: obs-springboot
        env:
        - name: server.port
          value: "8080"
        - name: MY_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace          
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: spring.application.name
          value: "$(MY_NAMESPACE)-$(POD_NAME)" 
        - name: environment
          value: "production"
        - name: TARGET_ONE_HOST
          value: obs-springboot
        - name: TARGET_TWO_HOST
          value: obs-springboot
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "http://tempo:4317"
        - name: OTEL_SERVICE_NAME
          value: "$(POD_NAME)"
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: "pod=$(POD_NAME)"
        - name: OTEL_METRICS_EXPORTER
          value: "none"
        - name: management.endpoints.web.exposure.include
          value: "*"
        - name: management.metrics.distribution.percentile-histogram.http.server.requests
          value: "true"
        - name: management.metrics.web.server.request.autotime.enabled
          value: "true"
        - name: management.metrics.tags.application
          value: "$(MY_NAMESPACE)-$(POD_NAME)"     
        - name: spring.rabbitmq.host
          value: rabbitmq
        - name: spring.redis.host
          value: "redis"
        - name: spring.redis.port
          value: "6379"
        - name: spring.datasource.url
          value: "jdbc:postgresql://postgres:5432/postgres"
        - name: spring.datasource.username
          value: "postgres"
        - name: spring.datasource.password
          value: "postgres"
---
apiVersion: v1
kind: Service
metadata:
  name: obs-springboot
  labels:
    app: obs-springboot
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: '8080'
    prometheus.io/path: '/actuator/prometheus'
    promtail.io/scrape: 'true'
spec:
  type: NodePort
  ports:
  - name: metrics
    port: 80
    targetPort: 8080
  - name: call
    port: 8080
    targetPort: 8080
  selector:
    app: obs-springboot
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:16.2
          env:
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              value: "postgres"
            - name: POSTGRES_DB
              value: "postgres"
          ports:
            - containerPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:7.2.4
          ports:
            - containerPort: 6379
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
---
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  selector:
    app: redis
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379